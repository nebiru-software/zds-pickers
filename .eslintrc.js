module.exports = {
  root: true,
  parser: '@babel/eslint-parser',
  extends: [
    'airbnb',
    'plugin:import/errors',
    'plugin:import/warnings',
    'plugin:json/recommended',
  ],
  env: {
    es6: true,
    browser: true,
    node: true,
  },
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
      modules: true,
    },
    ecmaVersion: 6,
    sourceType: 'module',
  },
  plugins: [
    '@studysync/jsx-conditionals',
    '@studysync/material-ui',
    '@studysync/persnickety',
    'custom-jsx-props-order',
    'json',
    'ocd',
    'prettier',
    'react-hooks',
  ],
  globals: {
    addDocumentSupport: true,
    addTooltipSupport: true,
    browser: true,
    cleanup: true,
    container: true,
    createElement: true,
    dive: true,
    fakeAnchorEl: true,
    fireEvent: true,
    gapi: true,
    getPage: true,
    goto: true,
    hasClass: true,
    login: true,
    mockedMatchMedia: true,
    mockedStore: true,
    mount: true,
    mountExpect: true,
    mountExpectWithTheme: true,
    React: true,
    removeDocumentSupport: true,
    removeTooltipSupport: true,
    render: true,
    routerStoreFromUrl: true,
    shallow: true,
    shallowDiveExpect: true,
    shallowExpect: true,
    spyOn: true,
    useTheme: true,
    withProps: true,
    wrapRouter: true,
    wrapRouterStore: true,
    wrapStore: true,
    wrapStoreForHook: true,
    wrapTheme: true,
  },
  settings: {
    'import/resolver': {
      alias: {
        map: [
          ['controls', './src/components/controls'],
          ['views', './src/components/views'],
          ['components', './src/components'],
          ['fp', './src/core/fp'],
          ['core', './src/core'],
          ['hoc', './src/hoc'],
          ['hooks', './src/hooks'],
          ['images', './src/images'],
          ['locale', './src/locale'],
          ['midi', './src/midi'],
          ['projections', './src/projections'],
          ['reducers', './src/reducers'],
          ['routing', './src/routing'],
          ['sagas', './src/sagas'],
          ['selectors', './src/selectors'],
          ['styles', './src/styles'],
        ],
        extensions: ['.js', '.json', '.spec.js'],
      },
      parcel: {
        rootDir: 'src',
      },
    },
  },
  rules: {
    '@studysync/jsx-conditionals/ensure-booleans': 'error',
    '@studysync/material-ui/import-alias-index': [
      'error',
      {
        aliases: [
          '@config',
          '@data',
          '@mocks',
          '@questions',
          '@reducers',
          '@reviews',
          'core',
          'fp',
          'hoc',
          'hooks',
          'images',
          'locale',
          'projections',
          'reducers',
          'routing',
          'sagas',
          'selectors',
          'styles',
          'views',
        ],
      },
    ],
    '@studysync/material-ui/no-importing-act': 'off',
    '@studysync/material-ui/no-importing-styles': 'error',
    '@studysync/material-ui/no-styled-from-core': 'error',
    '@studysync/material-ui/restricted-path-imports': 'error',
    '@studysync/material-ui/tree-shakeable-imports': 'error',
    '@studysync/persnickety/jsx-child-location': 'error',
    '@studysync/persnickety/jsx-multiple-props-multiple-lines': 'error',
    '@studysync/persnickety/jsx-single-prop-single-line': 'error',
    'array-element-newline': ['error', 'consistent'],
    'arrow-parens': [
      'error',
      'as-needed',
      {
        requireForBlockBody: true,
      },
    ],
    'comma-dangle': [
      'error',
      {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
        functions: 'always-multiline',
      },
    ],
    'custom-jsx-props-order/bcs-ef-order-props': 'error',
    'function-paren-newline': ['error', 'multiline'],
    'import/extensions': 'off',
    'import/no-duplicates': 'error',
    'import/no-named-as-default': 'off',
    'import/order': [
      'error',
      {
        groups: [
          'builtin',
          'external',
          'internal',
          'parent',
          'sibling',
          'index',
        ],
        'newlines-between': 'never',
      },
    ],
    'import/default': 'error',
    indent: [
      'error',
      2,
      {
        ignoredNodes: ['TemplateLiteral'],
      },
    ],
    'max-len': [
      'error',
      {
        code: 120,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
      },
    ],
    'no-await-in-loop': 'off',
    'no-confusing-arrow': 'off',
    'no-extra-parens': ['error', 'functions'],
    'no-multiple-empty-lines': [
      'error',
      {
        max: 1,
        maxEOF: 0,
      },
    ],
    'no-nested-ternary': 'off',
    'no-param-reassign': [
      'error',
      {
        props: true,
        ignorePropertyModificationsFor: ['draft'],
      },
    ],
    'no-restricted-imports': [
      2,
      {
        paths: [
          {
            name: 'lodash',
            message: "Please use methods from 'src/core/fp/' instead.",
          },
        ],
        patterns: ['@material-ui/core!?'],
      },
    ],
    'no-useless-concat': 'error',
    'object-curly-newline': [
      'error',
      {
        ObjectExpression: {
          consistent: true,
        },
        ObjectPattern: {
          multiline: true,
        },
      },
    ],
    'object-curly-spacing': ['error', 'always'],
    'object-property-newline': [
      'error',
      { allowAllPropertiesOnSameLine: true },
    ],
    'ocd/sort-import-declaration-specifiers': 'error',
    'ocd/sort-variable-declarator-properties': 'error',
    'prefer-template': 'error',
    'react/forbid-prop-types': 'off',
    'react-hooks/exhaustive-deps': 'warn',
    'react-hooks/rules-of-hooks': 'error',
    'react/function-component-definition': ['error', { namedComponents: 'arrow-function' }],
    'react/jsx-curly-brace-presence': 'error',
    'react/jsx-curly-spacing': ['error', { when: 'never', children: true }],
    'react/jsx-filename-extension': ['error', { extensions: ['.js'] }],
    'react/jsx-first-prop-new-line': ['error', 'multiline'],
    'react/jsx-max-props-per-line': ['error', { when: 'always', maximum: 1 }],
    'react/jsx-no-script-url': 'error',
    'react/jsx-no-target-blank': 'error',
    'react/jsx-no-undef': 'error',
    'react/jsx-one-expression-per-line': 'off',
    'react/jsx-props-no-spreading': 'off',
    'react/jsx-uses-react': 'error',
    'react/no-array-index-key': 'off',
    'react/no-danger': 'off',
    'react/jsx-pascal-case': 'error',
    'react/prop-types': ['error', { ignore: ['className'] }],
    'react/react-in-jsx-scope': 'error',
    semi: ['error', 'never'],
    'template-curly-spacing': ['off'],
  },
}
